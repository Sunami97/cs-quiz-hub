{
    "Type": "객관식",
    "Item": [
        {
            "question": "리액트의 주요 특징 중 하나는 무엇인가요?",
            "options": [
                "DOM을 직접 수정한다.",
                "가상 DOM을 사용하여 성능을 향상시킨다.",
                "서버에서 렌더링을 지원하지 않는다.",
                "상태 관리가 필요 없다."
            ],
            "answer": "가상 DOM을 사용하여 성능을 향상시킨다.",
            "commentary": "리액트는 가상 DOM을 사용하여 변경된 부분만 효율적으로 업데이트합니다."
        },
        {
            "question": "CSR(Client-Side Rendering)의 주요 장점은 무엇인가요?",
            "options": [
                "초기 로딩 속도가 빠르다.",
                "SEO 최적화에 유리하다.",
                "서버 부하를 줄인다.",
                "서버에서 모든 콘텐츠를 렌더링한다."
            ],
            "answer": "초기 로딩 속도가 빠르다.",
            "commentary": "CSR은 클라이언트에서 모든 렌더링을 처리하므로 초기 로딩 속도가 빠른 장점이 있습니다."
        },
        {
            "question": "SSR(Server-Side Rendering)의 장점은 무엇인가요?",
            "options": [
                "페이지 로딩 시 모든 데이터를 미리 가져온다.",
                "브라우저에서 JavaScript를 지원하지 않아도 된다.",
                "상태 관리가 간편하다.",
                "더 나은 사용자 경험을 제공한다."
            ],
            "answer": "페이지 로딩 시 모든 데이터를 미리 가져온다.",
            "commentary": "SSR은 서버에서 렌더링된 HTML을 제공하여 초기 로딩 시 모든 데이터를 미리 가져올 수 있습니다."
        },
        {
            "question": "리액트에서 상태(state)란 무엇을 의미하나요?",
            "options": [
                "UI의 변화를 추적하는 방법이다.",
                "서버에서 데이터를 가져오는 방법이다.",
                "컴포넌트 간의 데이터 전송 방법이다.",
                "리액트의 라이프사이클을 관리하는 방법이다."
            ],
            "answer": "UI의 변화를 추적하는 방법이다.",
            "commentary": "상태는 리액트 컴포넌트의 UI를 구성하는 데이터로, 변경될 때 UI를 다시 렌더링합니다."
        },
        {
            "question": "SSR과 CSR의 주된 차이점은 무엇인가요?",
            "options": [
                "서버에서 렌더링하는 방식이 다르다.",
                "프로그래밍 언어가 다르다.",
                "라이브러리 사용 여부가 다르다.",
                "상태 관리 방식이 다르다."
            ],
            "answer": "서버에서 렌더링하는 방식이 다르다.",
            "commentary": "SSR은 서버에서 HTML을 렌더링하고, CSR은 클라이언트에서 JavaScript를 통해 렌더링합니다."
        }
    ]
}